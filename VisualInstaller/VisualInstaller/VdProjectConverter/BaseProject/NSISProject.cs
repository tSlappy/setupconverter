//////////////////////////////////////////////////////////////////////////
// unSigned's Setup Projects Converter                                  //
// Copyright (c) 2016 - 2018 Slappy & unSigned, s. r. o.                //
// http://www.unsignedsw.com, https://github.com/tSlappy/setupconverter //
// All Rights Reserved.                                                 //
//////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.IO;

namespace SetupProjectConverter
{
    public class NsisProject
    {
        string[] coHeader = { 
        @"; #######################################################################################", 
        @"; # This NSIS script was generated by unSigned's Setup Projects Converter               # ",
        @"; # Copyright (c) 2016 - 2018 Slappy & unSigned, s. r. o. All Rights Reserved.          # ",
        @"; # Visit http://www.unsignedsw.com/ for more details.                                  # ",
        @"; ####################################################################################### ",
        @" ",
        @"; This script was created from .vdproj file. Not all features from .vdproj file may have been transfered.",
        @" ",
        @"; See the NSIS documentation at http://nsis.sourceforge.net/ for details on creating script files! ",
        @" ",
        @";--------------------------------" };

        public BaseProject mVdProject = null;
        OutputProject mOutputProject = OutputProject.Nsis;

        Dictionary<ProductInfo, string> mDefinedSymbols = null;
        Dictionary<int, string> mScriptData = null; // Data - every line has unique index starting with 0

        public void LoadProject(BaseProject baseProject)
        {
            mVdProject = baseProject;

            mScriptData = new Dictionary<int,string>();
            /*XmlDocument document = new XmlDocument();

            try
            {
                // Load the XmlDocument with the xmlData.
                document.LoadXml(vdProject.XmlData);
            }
            catch (Exception)
            {
            }*/
        }

        private int AddScriptLine(string line)
        {
            mScriptData.Add(mScriptData.Count, line == null ? " " : line);
            return mScriptData.Count - 1;
        }

        public bool Convert()
        {
            Dictionary<int, string> sections = new Dictionary<int, string>(5);
            bool useUninstaller = true;

            // 0. Write header
            for(int i = 0; i < coHeader.Length; i++)
            {
                AddScriptLine(coHeader[i]);
            }

            // Include files
            AddScriptLine("");
            AddCommentLine("Included files");
            AddScriptLine("!include \"MUI2.nsh\"");

            // Defines all values from ProductInfo as symbols
            AddScriptLine("");
            AddCommentLine("Product details");
            mDefinedSymbols = new Dictionary<ProductInfo,string>((int)ProductInfo._Count);
            for(int i = 0; i < (int)ProductInfo._Count; i++)
            {
                string value = GetValue((ProductInfo)i);
                if(!String.IsNullOrEmpty(value))
                {
                    AddScriptLine(DefineSymbol((ProductInfo)i, value));
                }
            }
            
            // 1. Get general installer info
            AddScriptLine("");
            AddCommentLine("Installer details");
            AddSetupProperty("Name", GetValue(ProductInfo.ProductName), true);
            AddSetupProperty("Caption", GetValue(ProductInfo.ProductName) + " " + GetValue(ProductInfo.ProductVersion), true);
            AddSetupProperty("BrandingText", GetValue(ProductInfo.ProductName), true);
            AddSetupProperty("ShowInstDetails", "show", false);
            AddSetupProperty("InstallDir", ReplaceAllVariablesInText(mVdProject.DefaultDir), true);
            //AddSetupProperty("DefaultGroupName", GetValue(ProductInfo.ProductName));
            //AddSetupProperty("AppCopyright", "Copyright (c) " + DateTime.Now.Year.ToString() + " " + GetValue(ProductInfo.Manufacturer));
            AddSetupProperty("RequestExecutionLevel", "user", false);
            if (!String.IsNullOrEmpty(mVdProject.Output))
            {              
                AddSetupProperty("OutFile", RemoveExtension(mVdProject.Output) + ".exe", true);
            }

            // Interface Settings
            AddScriptLine("");
            AddCommentLine("Interface Settings");
            AddScriptLine("!define MUI_ABORTWARNING");

            AddScriptLine("!insertmacro MUI_PAGE_WELCOME");
            //AddScriptLine("!insertmacro MUI_PAGE_LICENSE "${NSISDIR}\Docs\Modern UI\License.txt"");
            AddScriptLine("!insertmacro MUI_PAGE_COMPONENTS");
            AddScriptLine("!insertmacro MUI_PAGE_DIRECTORY");
            AddScriptLine("!insertmacro MUI_PAGE_INSTFILES");
  
            AddScriptLine("!insertmacro MUI_UNPAGE_CONFIRM");
            AddScriptLine("!insertmacro MUI_UNPAGE_INSTFILES");
            AddScriptLine("!insertmacro MUI_PAGE_FINISH");

            if (useUninstaller)
            {
                AddScriptLine("");
                AddScriptLine("!insertmacro MUI_UNPAGE_WELCOME");
                AddScriptLine("!insertmacro MUI_UNPAGE_CONFIRM");
                AddScriptLine("!insertmacro MUI_UNPAGE_INSTFILES");
                AddScriptLine("!insertmacro MUI_UNPAGE_FINISH");
            }

            AddScriptLine("");
            AddScriptLine("!insertmacro MUI_LANGUAGE \"English\"");

            // Create .onInit Function
            AddFunctionStart(".onInit");
            AddScriptLine("  InitPluginsDir");
            AddFunctionEnd();

            AddScriptLine("");
            AddCommentLine("Installer Sections");
            // 2. Create files and directories - Main section
            if (mVdProject.Files != null && mVdProject.Files.Count > 0)
            {
                AddSectionStart(GetValue(ProductInfo.ProductName), 1);
                sections.Add(1, GetValue(ProductInfo.ProductName));
                AddCommentLine("This is main section of installer - it contains files and folders");

                if (mVdProject.Folders != null && mVdProject.Folders.Count > 0)
                {
                    for (int i = 0; i < mVdProject.Folders.Count; i++)
                    {
                        string line = null;
                        // Out directory
                        line = String.Format("  SetOutPath \"{0}\"", ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.Folders[i].Id), 0));
                        AddScriptLine(line);

                        // Add all files in this directory
                        for (int j = 0; j < mVdProject.Files.Count; j++ )
                        {
                            if (mVdProject.Files[j].FolderId == mVdProject.Folders[i].Id)
                            {
                                // File [/nonfatal] [/a] ([/r] [/x file|wildcard [...]] (file|wildcard) [...] | /oname=file.dat infile.dat)                    
                                if (String.IsNullOrEmpty(mVdProject.Files[j].DestName))
                                    line = string.Format("  File \"{0}\"", ReplaceFolderWithSymbol(mVdProject.Files[j].SourceName, 0));
                                else
                                    line = string.Format("  File \"/oname={0}\" \"{1}\"", mVdProject.Files[j].DestName, ReplaceFolderWithSymbol(mVdProject.Files[j].SourceName, 0));

                                if (mVdProject.Files[j].Exclude)
                                    CommentLine(AddScriptLine(line));
                                else
                                    AddScriptLine(line);
                            }
                        }

                        // Add other files in this directory (ProjectOutput)
                        if (mVdProject.OtherTypeObjects != null)
                        {
                            for (int j = 0; j < mVdProject.OtherTypeObjects.Count; j++)
                            {
                                if (mVdProject.OtherTypeObjects[j].FolderId == mVdProject.Folders[i].Id && mVdProject.OtherTypeObjects[j].Type == OtherType.ProjectOutput)
                                {
                                    // File [/nonfatal] [/a] ([/r] [/x file|wildcard [...]] (file|wildcard) [...] | /oname=file.dat infile.dat)                    
                                    if (String.IsNullOrEmpty(mVdProject.OtherTypeObjects[j].DestName))
                                        line = string.Format("  File \"{0}\"", mVdProject.OtherTypeObjects[j].SourceName);
                                    else
                                        line = string.Format("  File \"{0}\" \"/oname={1}\"", mVdProject.OtherTypeObjects[j].SourceName, mVdProject.OtherTypeObjects[j].DestName);

                                    if (mVdProject.OtherTypeObjects[j].Exclude)
                                        CommentLine(AddScriptLine(line));
                                    else
                                        AddScriptLine(line);
                                }
                            }
                        }
                    }
                }
                AddSectionEnd();
            }

            // 3. Create shortcuts - Shortcuts section
            if (mVdProject.Shortcuts != null && mVdProject.Shortcuts.Count > 0)
            {
                AddSectionStart("Create Shortcuts", 2);
                sections.Add(2, "Create Shortcuts");
                for (int i = 0; i < mVdProject.Shortcuts.Count; i++)
                {
                    // CreateShortCut link.lnk target.file [parameters [icon.file [icon_index_number [start_options [keyboard_shortcut [description]]]]]]

                    string line = null;
                    //if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].Name))
                    {
                        // Set required parameters
                        line = string.Format("  CreateShortCut \"{0}.lnk\" \"{1}\"%1%3%4", GetShortcutFullName(mVdProject.Shortcuts[i]),
                            GetShortcutTarget(mVdProject.Shortcuts[i].TargetId));

                        // Replace %1 -> Parameters 
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].Arguments))
                            line = line.Replace("%1", "");
                        else
                            line = line.Replace("%1", " \"" + mVdProject.Shortcuts[i].Arguments + "\"");
                  /*      
                        // Replace %2 -> WorkingDir 
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].WorkingFolderId))
                            line = line.Replace("%2", "");
                        else
                            line = line.Replace("%2", " WorkingDir: \"" + ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.Shortcuts[i].WorkingFolderId)) + "\"");
                        */
                        // Replace %3 -> IconFilename 
                        string iconFile = null;
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].IconId))
                            line = line.Replace("%3", "");
                        else
                        {
                            // a) Get file
                            BaseFile shortcutFile = mVdProject.GetFileById(mVdProject.Shortcuts[i].IconId);
                            if (shortcutFile != null)
                            {
                                iconFile = ReplaceFolderVariables(mVdProject.GetFolderPathById(shortcutFile.FolderId) + "\\" + shortcutFile.GetName(), 0);
                                line = line.Replace("%3", " \"" + iconFile + "\"");
                            }
                        }
                        
                        // Replace %4 -> IconIndex 
                        if (String.IsNullOrEmpty(iconFile))
                            line = line.Replace("%4", "");
                        else
                            line = line.Replace("%4", " " + mVdProject.Shortcuts[i].IconIndex.ToString());
                    }
                    
                    AddScriptLine(line);
                }
                AddSectionEnd();
            }

            // 4. Create registry entries - -Post section
            AddSectionStart("-Post", 3);
            sections.Add(3, "Finalize");

            if (mVdProject.RegistryKeys != null && mVdProject.RegistryKeys.Count > 0)
            {                
                for (int i = 0; i < mVdProject.RegistryKeys.Count; i++)
                {
                    // HKLM "Software\My Company" "Path" value
                    string line = null;
                    if (mVdProject.RegistryKeys[i].Values != null)
                    {
                        for (int j = 0; j < mVdProject.RegistryKeys[i].Values.Count; j++)
                        {
                            line = String.Format("  {0} {1} \"{2}\" \"{3}\" \"{4}\"", GetRegKeyType(mVdProject.RegistryKeys[i].Values[j].Type), mVdProject.RegistryKeys[i].Root.ToString(), 
                                ReplaceSetupVariables(mVdProject.RegistryKeys[i].Path, 0), mVdProject.RegistryKeys[i].Values[j].Name, mVdProject.RegistryKeys[i].Values[j].Value);
                            AddScriptLine(line);
                        }
                    }
                }                
            }

            // Write uninstaller
            if (useUninstaller)
            {
                AddCommentLine("Create uninstaller");
                AddScriptLine("  WriteUninstaller \"$INSTDIR\\Uninstall.exe\"");
            }

            AddSectionEnd();

            // 5. Create descriptions
            AddScriptLine("");
            AddCommentLine("Sections descriptions");
            string sectionName = null;
            for(int i = 0; i < sections.Count; i++)
            {
                sections.TryGetValue((i + 1), out sectionName);
                AddScriptLine("LangString DESC_Section0" + (i + 1).ToString() + " ${LANG_ENGLISH} \"" + sectionName + "\"");
            }

            AddScriptLine("");
            AddCommentLine("Assign language strings to sections");
            AddScriptLine("!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN");
            for(int i = 0; i < sections.Count; i++)
            {
                AddScriptLine("  !insertmacro MUI_DESCRIPTION_TEXT ${Section0" + (i+1).ToString() + "} $(DESC_Section0" + (i+1).ToString() + ")");
            }
            AddScriptLine("!insertmacro MUI_FUNCTION_DESCRIPTION_END");

            #region Uninstaller
            // 6. Uninstaller section            
            if (useUninstaller)
            {
                AddScriptLine("");
                AddCommentLine("Uninstaller Section");
                AddSectionStart("Uninstall", 9);

                AddCommentLine("Delete uninstaller");
                AddScriptLine("  Delete \"$INSTDIR\\Uninstall.exe\"");

                // 6-1. Delete shortcuts
                if (mVdProject.Shortcuts != null && mVdProject.Shortcuts.Count > 0)
                {
                    AddScriptLine("");
                    AddCommentLine("Delete shortcuts");
                    for (int i = 0; i < mVdProject.Shortcuts.Count; i++)
                    {
                        string line = null;
                        line = string.Format("  Delete \"{0}.lnk\"", GetShortcutFullName(mVdProject.Shortcuts[i]));

                        AddScriptLine(line);
                    }
                }

                // 6-2. Delete files and directories
                if (mVdProject.Files != null && mVdProject.Files.Count > 0)
                {
                    AddScriptLine("");
                    AddCommentLine("Delete files and folders");
                    if (mVdProject.Folders != null && mVdProject.Folders.Count > 0)
                    {
                        for (int i = 0; i < mVdProject.Folders.Count; i++)
                        {
                            string line = null;
                            // Do not delete System directories!
                            string systemDirectory = mVdProject.GetFolderPathById(mVdProject.Folders[i].Id);

                            // Delete all files in this directory
                            for (int j = 0; j < mVdProject.Files.Count; j++)
                            {
                                if (mVdProject.Files[j].FolderId == mVdProject.Folders[i].Id)
                                {
                                    if (String.IsNullOrEmpty(mVdProject.Files[j].DestName))
                                        line = string.Format("  Delete \"{0}\\{1}\"", ReplaceFolderVariables(systemDirectory, 0), mVdProject.Files[j].SourceName);
                                    else
                                        line = string.Format("  Delete \"{0}\\{1}\"", ReplaceFolderVariables(systemDirectory, 0), mVdProject.Files[j].DestName);

                                    line = line.Replace(@"\\", @"\");

                                    if (mVdProject.Files[j].Exclude)
                                        CommentLine(AddScriptLine(line));
                                    else
                                        AddScriptLine(line);
                                }
                            }

                            // Delete other type files in this directory (ProjectOutput, ...)
                            if (mVdProject.OtherTypeObjects != null)
                            {
                                for (int j = 0; j < mVdProject.OtherTypeObjects.Count; j++)
                                {
                                    if (mVdProject.OtherTypeObjects[j].FolderId == mVdProject.Folders[i].Id && mVdProject.OtherTypeObjects[j].Type == OtherType.ProjectOutput)
                                    {
                                        if (String.IsNullOrEmpty(mVdProject.OtherTypeObjects[j].DestName))
                                            line = string.Format("  Delete \"{0}\\{1}\"", ReplaceFolderVariables(systemDirectory, 0), mVdProject.OtherTypeObjects[j].SourceName);
                                        else
                                            line = string.Format("  Delete \"{0}\\{1}\"", ReplaceFolderVariables(systemDirectory, 0), mVdProject.OtherTypeObjects[j].DestName);

                                        line = line.Replace(@"\\", @"\");

                                        if (mVdProject.OtherTypeObjects[j].Exclude)
                                            CommentLine(AddScriptLine(line));
                                        else
                                            AddScriptLine(line);
                                    }
                                }
                            }

                            // Delete directory itself
                            systemDirectory = mVdProject.GetFolderPathById(mVdProject.Folders[i].Id);
                            if (!IsSystemDirectory(systemDirectory))
                            {
                                systemDirectory = ReplaceFolderVariables(systemDirectory, 0);
                                line = String.Format("  RMDir \"{0}\"", systemDirectory);
                                AddScriptLine(line);
                                AddScriptLine("");
                            }
                        }
                    }
                }

                // 6-3. Create registry entries - -Post section
                if (mVdProject.RegistryKeys != null && mVdProject.RegistryKeys.Count > 0)
                {
                    AddScriptLine("");
                    AddCommentLine("Delete registry keys");
                    for (int i = 0; i < mVdProject.RegistryKeys.Count; i++)
                    {
                        string line = null;
                        if (mVdProject.RegistryKeys[i].Values != null)
                        {
                            for (int j = 0; j < mVdProject.RegistryKeys[i].Values.Count; j++)
                            {
                                line = String.Format("  DeleteRegValue {0} \"{1}\" \"{2}\"", mVdProject.RegistryKeys[i].Root.ToString(),
                                    ReplaceSetupVariables(mVdProject.RegistryKeys[i].Path, 0), mVdProject.RegistryKeys[i].Values[j].Name);
                                AddScriptLine(line);

                                line = String.Format("  DeleteRegKey /ifempty {0} \"{1}\"", mVdProject.RegistryKeys[i].Root.ToString(), ReplaceSetupVariables(mVdProject.RegistryKeys[i].Path, 0));
                                AddScriptLine(line);
                            }
                        }
                    }
                }

                // 6-4. Final
                AddSectionEnd();                
            }
            #endregion

            return true;
        }

        private bool IsSystemDirectory(string systemDirectory)
        {
            int start = systemDirectory.IndexOf('[');
            
            // Only [TARGETDIR] can be deleted
            if (systemDirectory == "[TARGETDIR]" || start == -1)
                return false;
            else
            {
                int end = systemDirectory.IndexOf(']');
                if ((end + 1) == systemDirectory.Length)
                    return true;
                else
                    return false;
            }
        }

        

        private void AddFunctionStart(string functionName)
        {
            AddScriptLine("");
            AddScriptLine("Function \"" + functionName + "\"");
        }

        private void AddFunctionEnd()
        {
            AddScriptLine("FunctionEnd");
        }

        private void AddSectionStart(string sectionName, int index)
        {
            AddScriptLine("");
            AddScriptLine("Section \"" + sectionName + "\" Section0" +index.ToString());
        }

        private void AddSectionEnd()
        {
            AddScriptLine("SectionEnd");
        }

        private void AddSetupProperty(string directive, string value, bool escape)
        {
            if (!String.IsNullOrEmpty(value))
            {
                if (escape)
                    AddScriptLine(directive + " \"" + value + "\"");
                else
                    AddScriptLine(directive + " " + value);
            }
        }

        private string DefineSymbol(ProductInfo productInfo, string value)
        {
            // Create uppercase name and add it to dictionary
            string symbol = GetSymbolName(productInfo);

            mDefinedSymbols.Add(productInfo, symbol);

            return String.Format("!define {0} \"{1}\"", symbol, value);
        }

        private string GetSymbolName(ProductInfo productInfo)
        {
            string name = productInfo.ToString();
            string result = name[0].ToString();

            for (int i = 1; i < name.Length; i++)
            {
                if (((int)name[i] > 64) && ((int)name[i] < 91)) // A to Z
                {
                    // Add underscore only if next char is not also uppercase
                    if ((i + 1) < name.Length)
                    {
                        if (((int)name[i + 1] > 64) && ((int)name[i + 1] < 91)) // A to Z
                        {
                        }
                        else
                            result += "_";
                    }
                    else
                        result += "_";
                }
                result += name[i];
            }

            return result.ToUpper();
        }

        private string RemoveExtension(string filename)
        {
            // We assume filename is "filename.ext" without any other paths
            try
            {
                int pos = filename.IndexOf('.');
                if (pos > -1)
                    return filename.Substring(0, pos);
                else
                    return filename;
            }
            catch (Exception)
            {
                return filename;
            }
        }

        private string GetShortcutFullName(BaseShortcut vdShortcut)
        {
            string fullName = ReplaceFolderVariables(mVdProject.GetFolderPathById(vdShortcut.FolderId), 0) + "\\" + RemoveExtension(vdShortcut.Name);
            return fullName.Replace(@"\\", @"\");
        }

        private string GetShortcutTarget(string target)
        {
            string targetPath = null;
            // This may be a Folder or File!
            BaseFile targetFile = mVdProject.GetFileById(target);
            if (targetFile == null)
            {
                targetPath = mVdProject.GetFolderPathById(target); 
            }
            else
            {
                // Get file with whole path
                targetPath = mVdProject.GetFolderPathById(targetFile.FolderId) + "\\" + targetFile.GetName();
            }
            
            // Still null? Maybe the target is ProjectOutput or other stuff
            switch (mVdProject.mInputProject)
            {
                case InputProject.VdProject:
                {
                    if (targetFile == null || targetPath == null)
                    {
                        BaseOtherType otherTypeObject = mVdProject.GetOtherTypeObjectById(target);
                        // Get whole path
                        targetPath = mVdProject.GetFolderPathById(otherTypeObject.FolderId) + "\\" + otherTypeObject.DestName;
                    }
                    break;
                }

                case InputProject.IsleProject:
                {
                    /*if (targetFile == null || targetPath == null)
                    {
                        BaseOtherType otherTypeObject = mVdProject.GetOtherTypeObjectById(target);
                        // Get whole path
                        targetPath = mVdProject.GetFolderPathById(otherTypeObject.FolderId) + "\\" + otherTypeObject.DestName;
                    }*/
                    break;
                }
            }

            // ReplaceFolderVariables() will translate [TARGETDIR] into {app} 
            return ReplaceFolderVariables(targetPath, 0);
        }

        private string GetRegKeyType(RegValueType regValueType)
        {
            string result = null;
            switch (regValueType)
            {
                case RegValueType.REG_NONE:     // If none (the default setting) is specified, Setup will create the key but not a value. In this case the ValueName and ValueData parameters are ignored.
                    result = "WriteRegStr";
                    break;
                case RegValueType.REG_SZ:       // If string is specified, Setup will create a string (REG_SZ) value.
                    result = "WriteRegStr";
                    break;
                case RegValueType.REG_EXPAND_SZ:// If expandsz is specified, Setup will create an expand-string (REG_EXPAND_SZ) value.
                    result = "WriteRegExpandStr";
                    break;
                case RegValueType.REG_MULTI_SZ: // If multisz is specified, Setup will create an multi-string (REG_MULTI_SZ) value.
                    result = "WriteRegStr";
                    break;
                case RegValueType.REG_DWORD:    // If dword is specified, Setup will create a 32-bit integer (REG_DWORD) value.
                    result = "WriteRegDWORD";
                    break;
                case RegValueType.REG_QWORD:    // If qword is specified, Setup will create a 64-bit integer (REG_QWORD) value.
                    result = "WriteRegDWORD";
                    break;
                case RegValueType.REG_BINARY:   // If binary is specified, Setup will create a binary (REG_BINARY) value.
                    result = "WriteRegBin";
                    break;
            }

            if(String.IsNullOrEmpty(result))
                return "string";
            else
                return result;
        }

        // This method replaces all [VARIABLES] into appropriate form
        private string ReplaceAllVariablesInText(string text)
        {
            if (!text.Contains("["))
                return text;
            else
            {
                // 1. Replace as Folder
                string firstReplace = ReplaceFolderVariables(text, 0);
                // 2. Replace as Variable
                return ReplaceSetupVariables(firstReplace, 0);
            }
        }

        // This method translates [VARIABLE] into $NSIS_DIR 
        private string ReplaceFolderVariables(string folder, int startPos)
        {
            if (!folder.Contains("["))
                return folder;
            else
            {
                // Replace variable with NSIS constant
                int start = folder.IndexOf('[', startPos);
                int end = start;
                while (end < folder.Length && end > -1)
                {
                    if (folder[end] == ']')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return folder; // All variables were scanned

                // Replace first part
                string variable = folder.Substring(start, (end - start));
                string slashFolder = folder.Replace(variable, GetFolderEquivalent(variable));
                return ReplaceFolderVariables(slashFolder.Replace(@"\\", @"\"), start + 1);
            }
        }

        // This method replaces <VSSolutionFolder> into ${VS_SOLUTION_FOLDER}
        private string ReplaceFolderWithSymbol(string folder, int startPos)
        {
            if (!folder.Contains("<"))
                return folder;
            else
            {
                // Replace variable with NSIS constant
                int start = folder.IndexOf('<', startPos);
                int end = start;
                while (end < folder.Length && end > -1)
                {
                    if (folder[end] == '>')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return folder; // All variables were scanned

                // Replace first part
                string variable = folder.Substring(start, (end - start));
                string slashFolder = folder.Replace(variable, GetSymbolEquivalent(variable));
                return ReplaceFolderWithSymbol(slashFolder.Replace(@"\\", @"\"), start + 1);
            }
        }

        // This method translates [VARIABLE] into ${NSIS_SYMBOL} 
        private string ReplaceSetupVariables(string text, int startPos)
        {
            if (String.IsNullOrEmpty(text))
                return string.Empty;

            if (!text.Contains("["))
                return text;
            else
            {
                // Replace variable with Inno Setup constant
                int start = text.IndexOf('[', startPos);
                int end = start;
                while (end < text.Length && end > -1)
                {
                    if (text[end] == ']')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return text; // All variables were scanned

                // Replace first part (without [ ] chars)
                string possibleSymbol = text.Substring(start, (end - start));
                string cleanProperty = possibleSymbol.Replace('[', ' ');
                cleanProperty = cleanProperty.Replace(']', ' ');
                cleanProperty = cleanProperty.Trim();

                try
                {
                    var productInfo = (ProductInfo)Enum.Parse(typeof(ProductInfo), cleanProperty);
                    string variable = GetValue(productInfo);
                    string slashFolder = text.Replace(possibleSymbol, variable);
                    return ReplaceSetupVariables(slashFolder.Replace(@"\\", @"\"), start + 1);
                }
                catch (Exception)
                {
                    return text;
                }                
            }
        }

        private string GetFolderEquivalent(string property)        
        {            
            string cleanProperty = property.Replace('[', ' ');
            cleanProperty = cleanProperty.Replace(']', ' ');
            cleanProperty = cleanProperty.Trim();
            // This is the same method for NSIS & Inno Setup
            return PropertyReference.GetVariableEquivalent(cleanProperty, false);
        }

        private string GetSymbolEquivalent(string property)
        {
            string cleanProperty = property.Replace('<', ' ');
            cleanProperty = cleanProperty.Replace('>', ' ');
            cleanProperty = cleanProperty.Trim();

            try
            {
                ProductInfo productInfo = (ProductInfo)Enum.Parse(typeof(ProductInfo), cleanProperty);
                string symbol = property;
                if (mDefinedSymbols.TryGetValue(productInfo, out symbol))
                    return string.Format("${{{0}}}", symbol);

                return property;
            }
            catch (Exception)
            {
                return property;
            }
        }

        private void AddCommentLine(string comment)
        {
            AddScriptLine("; " + comment);
        }

        private void CommentLine(int index)
        {
            if (mScriptData.ContainsKey(index))
            {
                string line = null;
                mScriptData.TryGetValue(index, out line);
                if (String.IsNullOrEmpty(line))
                {
                    line = "; ";
                    mScriptData.Add(index, line);
                }
                else
                {
                    if (line[0] != ';')
                    {
                        line = ";" + line;
                        mScriptData[index] = line;
                    }
                }
            }
        }

        private string GetValue(ProductInfo productInfo)
        {
            if (mVdProject.Product == null)
                return "[" + productInfo.ToString() + "]"; // Do not modify it!
            else
            {
                // Product info as symbol
                if (mDefinedSymbols.ContainsKey(productInfo))
                {
                    string value = null;
                    mDefinedSymbols.TryGetValue(productInfo, out value);
                    return "${" + value + "}";
                }
            }
 	        return mVdProject.Product.GetValue(productInfo);
        }

        public bool SaveScript(string pathToScript)
        {
            try
            {
                string[] scriptFile = new string[mScriptData.Count];
                for (int i = 0; i < mScriptData.Count; i++)
                {
                    string line = null;
                    mScriptData.TryGetValue(i, out line);
                    scriptFile[i] = line;
                }
                System.IO.File.WriteAllLines(pathToScript, scriptFile);
                return true;
            }
            catch (System.Exception)
            {
                return false;
            }
        }
    }
}
