//////////////////////////////////////////////////////////////////////////
// unSigned's Setup Projects Converter                                  //
// Copyright (c) 2016 - 2018 Slappy & unSigned, s. r. o.                //
// http://www.unsignedsw.com, https://github.com/tSlappy/setupconverter //
// All Rights Reserved.                                                 //
//////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.IO;

namespace SetupProjectConverter
{
    public class InnoProject
    {
        string[] coHeader = { 
        @"; #######################################################################################", 
        @"; # This Inno Setup script was generated by unSigned's Setup Projects Converter         # ",
        @"; # Copyright (c) 2016 - 2018 Slappy & unSigned, s. r. o. All Rights Reserved.          # ",
        @"; # Visit http://www.unsignedsw.com/ for more details.                                  # ",
        @"; ####################################################################################### ",
        @" ",
        @"; This script was created from .vdproj file. Not all features from .vdproj file may have been transfered.",
        @" ",
        @"; See the Inno Setup documentation at http://www.jrsoftware.org/ for details on creating script files! ",
        @" ",
        @";--------------------------------" };

        public BaseProject mVdProject = null;
        OutputProject mOutputProject = OutputProject.InnoSetup;

        Dictionary<ProductInfo, string> mDefinedSymbols = null;
        Dictionary<int, string> mScriptData = null; // Data - every line has unique index starting with 0

        public void LoadProject(BaseProject baseProject)
        {
            mVdProject = baseProject;

            mScriptData = new Dictionary<int,string>();
            /*XmlDocument document = new XmlDocument();

            try
            {
                // Load the XmlDocument with the xmlData.
                document.LoadXml(vdProject.XmlData);
            }
            catch (Exception)
            {
            }*/
        }

        private int AddScriptLine(string line)
        {
            mScriptData.Add(mScriptData.Count, line == null ? " " : line);
            return mScriptData.Count - 1;
        }

        public bool Convert()
        {
            // 0. Write header
            for(int i = 0; i < coHeader.Length; i++)
            {
                AddScriptLine(coHeader[i]);
            }

            // Defines all values from ProductInfo as symbols
            AddScriptLine("");
            AddCommentLine("Product details");
            mDefinedSymbols = new Dictionary<ProductInfo,string>((int)ProductInfo._Count);
            for(int i = 0; i < (int)ProductInfo._Count; i++)
            {
                string value = GetValue((ProductInfo)i);
                if(!String.IsNullOrEmpty(value))
                {
                    AddScriptLine(DefineSymbol((ProductInfo)i, value));
                }
            }
            
            // 1. Get general installer info - [Setup] section
            //AddCommentLine("Installer details");
            AddSection("[Setup]");
            AddSetupDirective("AppName", GetValue(ProductInfo.ProductName));
            AddSetupDirective("AppVersion", GetValue(ProductInfo.ProductVersion));
            AddSetupDirective("AppId", GetValue(ProductInfo.ProductCode));
            AddSetupDirective("DefaultDirName", ReplaceAllVariablesInText(mVdProject.DefaultDir));
            AddSetupDirective("DefaultGroupName", GetValue(ProductInfo.ProductName));
            AddSetupDirective("AppCopyright", "Copyright (c) " + DateTime.Now.Year.ToString() + " " + GetValue(ProductInfo.Manufacturer));
            AddSetupDirective("AppPublisher", GetValue(ProductInfo.Manufacturer));
            if (!String.IsNullOrEmpty(mVdProject.Output))
            {              
                int pos = mVdProject.Output.LastIndexOf('\\');
                if (pos > 0)
                {
                    AddSetupDirective("OutputDir", mVdProject.Output.Substring(0, pos));
                    AddSetupDirective("OutputBaseFilename", RemoveExtension(mVdProject.Output.Substring(pos + 1)));
                }
                else
                    AddSetupDirective("OutputBaseFilename", RemoveExtension(mVdProject.Output));
            }

            // 2-1. Create files and directories - [Files] section
            if (mVdProject.Files != null && mVdProject.Files.Count > 0)
            {
                AddSection("[Files]");
                for (int i = 0; i < mVdProject.Files.Count; i++)
                {
                    // Source: "CTL3DV2.DLL"; DestDir: "{sys}"; DestName: "MYPROG2.EXE" Flags: onlyifdoesntexist uninsneveruninstall
                    string line = null;
                    if (String.IsNullOrEmpty(mVdProject.Files[i].DestName))
                    {
                        line = string.Format("Source: \"{0}\"; DestDir: \"{1}\"; %1Flags: {2}", ReplaceFolderWithSymbol(mVdProject.Files[i].SourceName, 0), ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.Files[i].FolderId), 0), GetFileFlags(mVdProject.Files[i]));                                                
                    }
                    else
                    {
                        line = string.Format("Source: \"{0}\"; DestDir: \"{1}\"; DestName: \"{2}\"; %1Flags: {3}", ReplaceFolderWithSymbol(mVdProject.Files[i].SourceName, 0), ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.Files[i].FolderId), 0),
                            mVdProject.Files[i].DestName, GetFileFlags(mVdProject.Files[i]));
                    }

                    switch (mVdProject.Files[i].Details.Type)
                    {
                        case FileType.Assembly:
                        {
                            if (mVdProject.Files[i].Details.IsInGAC)
                            {
                                // If Processor architecture is missing, fill in MSIL
                                string asmName =  mVdProject.Files[i].Details.AsmName;
                                if (!asmName.Contains("ProcessorArchitecture"))
                                    asmName = asmName + ", ProcessorArchitecture=MSIL";
                                line = line.Replace("%1", "StrongAssemblyName: \"" + asmName + "\"; ");
                            }
                        }
                        break;

                        case FileType.File:
                        {
                        }
                        break;

                        case FileType.Font:
                        {
                            if (mVdProject.Files[i].Details.Register)
                                line = line.Replace("%1", "FontInstall: \"<Insert name of your font HERE!>\"; ");
                        }
                        break;

                        case FileType.Library:
                        {
                        }
                        break;
                    }

                    line = line.Replace("%1", "");

                    if (mVdProject.Files[i].Exclude)
                        CommentLine(AddScriptLine(line));
                    else
                        AddScriptLine(line);
                }
            }

            // 2-2. Insert Other files into [Files] section
            if (mVdProject.OtherTypeObjects != null && mVdProject.OtherTypeObjects.Count > 0)
            {
                if (mVdProject.Files == null || mVdProject.Files.Count == 0)
                    AddSection("[Files]");

                for (int i = 0; i < mVdProject.OtherTypeObjects.Count; i++)
                {
                    // At this moment add only ProjectOutput files
                    if (mVdProject.OtherTypeObjects[i].Type != OtherType.ProjectOutput)
                        continue;

                    // Source: "CTL3DV2.DLL"; DestDir: "{sys}"; DestName: "MYPROG2.EXE" Flags: onlyifdoesntexist uninsneveruninstall
                    string line = null;
                    if (String.IsNullOrEmpty(mVdProject.OtherTypeObjects[i].DestName))
                    {
                        line = string.Format("Source: \"{0}\"; DestDir: \"{1}\";", ReplaceFolderWithSymbol(mVdProject.OtherTypeObjects[i].SourceName, 0), ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.OtherTypeObjects[i].FolderId), 0));
                    }
                    else
                    {
                        line = string.Format("Source: \"{0}\"; DestDir: \"{1}\"; DestName: \"{2}\";", ReplaceFolderWithSymbol(mVdProject.OtherTypeObjects[i].SourceName, 0), ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.OtherTypeObjects[i].FolderId), 0), mVdProject.OtherTypeObjects[i].DestName);
                    }

                    if (mVdProject.OtherTypeObjects[i].Exclude)
                        CommentLine(AddScriptLine(line));
                    else
                        AddScriptLine(line);
                }
            }

            // 3. Create registry entries - [Registry] section
            if (mVdProject.RegistryKeys != null && mVdProject.RegistryKeys.Count > 0)
            {
                AddSection("[Registry]");
                for (int i = 0; i < mVdProject.RegistryKeys.Count; i++)
                {
                    // Root: HKLM; Subkey: "Software\My Company"; Flags: uninsdeletekeyifempty
                    string line = null;
                    if (mVdProject.RegistryKeys[i].Values == null)
                    {
                        line = String.Format("Root: {0}; Subkey: \"{1}\"; Flags: uninsdeletekeyifempty", mVdProject.RegistryKeys[i].Root.ToString(), ReplaceSetupVariables(mVdProject.RegistryKeys[i].Path, 0));
                        AddScriptLine(line);
                    }
                    else
                    {
                        for (int j = 0; j < mVdProject.RegistryKeys[i].Values.Count; j++)
                        {
                            line = String.Format("Root: {0}; Subkey: \"{1}\"; ValueType: {2}; ValueName: \"{3}\"; ValueData: \"{4}\"; Flags: uninsdeletekeyifempty",
                                mVdProject.RegistryKeys[i].Root.ToString(), ReplaceSetupVariables(mVdProject.RegistryKeys[i].Path, 0), GetRegKeyType(mVdProject.RegistryKeys[i].Values[j].Type),
                                mVdProject.RegistryKeys[i].Values[j].Name, mVdProject.RegistryKeys[i].Values[j].Value);
                            AddScriptLine(line);
                        }
                    }

                }
            }

            // 4. Create shortcuts - [Icons] section
            if (mVdProject.Shortcuts != null && mVdProject.Shortcuts.Count > 0)
            {
                AddSection("[Icons]");
                for (int i = 0; i < mVdProject.Shortcuts.Count; i++)
                {
                    // Name: "{group}\My Program"; Filename: "{app}\MYPROG.EXE"; WorkingDir: "{app}"
                    string line = null;
                    //if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].Name))
                    {
                        // Set required parameters
                        line = string.Format("Name: \"{0}\"; Filename: \"{1}\";%1%2%3%4 Flags: {2}", GetShortcutFullName(mVdProject.Shortcuts[i]),
                            GetShortcutTarget(mVdProject.Shortcuts[i].TargetId), GetShortcutFlag(mVdProject.Shortcuts[i].IsFolder));

                        // Replace %1 -> Parameters 
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].Arguments))
                            line = line.Replace("%1", "");
                        else
                            line = line.Replace("%1", " Parameters: \"" + mVdProject.Shortcuts[i].Arguments + "\";");
                        
                        // Replace %2 -> WorkingDir 
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].WorkingFolderId))
                            line = line.Replace("%2", "");
                        else
                            line = line.Replace("%2", " WorkingDir: \"" + ReplaceFolderVariables(mVdProject.GetFolderPathById(mVdProject.Shortcuts[i].WorkingFolderId), 0) + "\";");
                        
                        // Replace %3 -> IconFilename 
                        string iconFile = null;
                        if (String.IsNullOrEmpty(mVdProject.Shortcuts[i].IconId))
                            line = line.Replace("%3", "");
                        else
                        {
                            // a) Get file
                            BaseFile shortcutFile = mVdProject.GetFileById(mVdProject.Shortcuts[i].IconId);
                            if (shortcutFile != null)
                            {
                                iconFile = ReplaceFolderVariables(mVdProject.GetFolderPathById(shortcutFile.FolderId) + "\\" + shortcutFile.GetName(), 0);
                                line = line.Replace("%3", " IconFilename: \"" + iconFile + "\";");
                            }
                            else
                                line = line.Replace("%3", "");
                        }
                        
                        // Replace %4 -> IconIndex 
                        if (String.IsNullOrEmpty(iconFile))
                            line = line.Replace("%4", "");
                        else
                            line = line.Replace("%4", " IconIndex: \"" + mVdProject.Shortcuts[i].IconIndex.ToString() + "\";");
                    }
                    
                    AddScriptLine(line);
                }
            }

            return true;
        }

        private string GetFileFlags(BaseFile vdFile)
        {
            string flag = "ignoreversion";

            switch(vdFile.Details.Type)
            {
                case FileType.Assembly:
                {
                    if (vdFile.Details.Register && !vdFile.Details.IsInGAC)
                        flag = "regserver";

                    if (vdFile.Details.IsInGAC)
                        flag = "gacinstall sharedfile uninsnosharedfileprompt";  
                }
                break;

                case FileType.File:
                {
                    if (vdFile.Details.Register)
                        flag = "regserver";            
                }
                break;

                case FileType.Font:
                {
                    if (vdFile.Details.IsOTF)
                        flag = "fontisnttruetype";
                }
                break;

                case FileType.Library:
                {
                    flag = "regtypelib";
                }
                break;
            }

            return "\"" + flag + "\"";
        }

        private void AddSetupDirective(string directive, string value)
        {
            if (!String.IsNullOrEmpty(value))
            {
                AddScriptLine(directive + "=" + value);
            }
        }

        private string DefineSymbol(ProductInfo productInfo, string value)
        {
            // Create uppercase name and add it to dictionary
            string symbol = GetSymbolName(productInfo);

            mDefinedSymbols.Add(productInfo, symbol);

            // Inno Setup requires the curly brace to me doubled!
            if (value.Length > 0 && value[0] == '{')
                value = "{" + value;

            return String.Format("#define {0} \"{1}\"", symbol, value);
        }

        private string GetSymbolName(ProductInfo productInfo)
        {
            string name = productInfo.ToString();
            string result = name[0].ToString();

            for (int i = 1; i < name.Length; i++)
            {
                if (((int)name[i] > 64) && ((int)name[i] < 91)) // A to Z
                {
                    // Add underscore only if next char is not also uppercase
                    if ((i + 1) < name.Length)
                    {
                        if (((int)name[i + 1] > 64) && ((int)name[i + 1] < 91)) // A to Z
                        {
                        }
                        else
                            result += "_";
                    }
                    else
                        result += "_";
                }
                result += name[i];
            }

            return result.ToUpper();
        }

        private string RemoveExtension(string filename)
        {
            // We assume filename is "filename.ext" without any other paths
            try
            {
                int pos = filename.IndexOf('.');
                if (pos > -1)
                    return filename.Substring(0, pos);
                else
                    return filename;
            }
            catch (Exception)
            {
                return filename;
            }
        }

        private string GetShortcutFullName(BaseShortcut vdShortcut)
        {
            string fullName = ReplaceFolderVariables(mVdProject.GetFolderPathById(vdShortcut.FolderId), 0) + "\\" + RemoveExtension(vdShortcut.Name);
            return fullName.Replace(@"\\", @"\");
        }

        private string GetShortcutTarget(string target)
        {
            string targetPath = null;
            // This may be a Folder or File!
            BaseFile targetFile = mVdProject.GetFileById(target);
            if (targetFile == null)
            {
                targetPath = mVdProject.GetFolderPathById(target); 
            }
            else
            {
                // Get file with whole path
                targetPath = mVdProject.GetFolderPathById(targetFile.FolderId) + "\\" + targetFile.GetName();
            }

            // Still null? Maybe the target is ProjectOutput or other stuff
            switch (mVdProject.mInputProject)
            {
                case InputProject.VdProject:
                {
                    if (targetFile == null || targetPath == null)
                    {
                        BaseOtherType otherTypeObject = mVdProject.GetOtherTypeObjectById(target);
                        // Get whole path
                        targetPath = mVdProject.GetFolderPathById(otherTypeObject.FolderId) + "\\" + otherTypeObject.DestName;
                    }
                    break;
                }
                case InputProject.IsleProject:
                {
                    /*if (targetFile == null || targetPath == null)
                    {
                        BaseOtherType otherTypeObject = mVdProject.GetOtherTypeObjectById(target);
                        // Get whole path
                        targetPath = mVdProject.GetFolderPathById(otherTypeObject.FolderId) + "\\" + otherTypeObject.DestName;
                    }*/
                    break;
                }
            }

            // ReplaceFolderVariables() will translate [TARGETDIR] into {app} 
            return ReplaceFolderVariables(targetPath, 0);
        }

        private string GetShortcutFlag(bool isFolder)
        {
            if (isFolder)
                return "foldershortcut";
            else return "createonlyiffileexists";
        }

        private string GetRegKeyType(RegValueType regValueType)
        {
            string result = null;
            switch (regValueType)
            {
                case RegValueType.REG_NONE:     // If none (the default setting) is specified, Setup will create the key but not a value. In this case the ValueName and ValueData parameters are ignored.
                    result = "none";
                    break;
                case RegValueType.REG_SZ:       // If string is specified, Setup will create a string (REG_SZ) value.
                    result = "string";
                    break;
                case RegValueType.REG_EXPAND_SZ:// If expandsz is specified, Setup will create an expand-string (REG_EXPAND_SZ) value.
                    result = "expandsz";
                    break;
                case RegValueType.REG_MULTI_SZ: // If multisz is specified, Setup will create an multi-string (REG_MULTI_SZ) value.
                    result = "multisz";
                    break;
                case RegValueType.REG_DWORD:    // If dword is specified, Setup will create a 32-bit integer (REG_DWORD) value.
                    result = "dword";
                    break;
                case RegValueType.REG_QWORD:    // If qword is specified, Setup will create a 64-bit integer (REG_QWORD) value.
                    result = "qword";
                    break;
                case RegValueType.REG_BINARY:   // If binary is specified, Setup will create a binary (REG_BINARY) value.
                    result = "binary";
                    break;
            }

            if(String.IsNullOrEmpty(result))
                return "string";
            else
                return result;
        }

        // This method replaces all [VARIABLES] into appropriate form
        private string ReplaceAllVariablesInText(string text)
        {
            if (!text.Contains("["))
                return text;
            else
            {
                // 1. Replace as Folder
                string firstReplace = ReplaceFolderVariables(text, 0);
                // 2. Replace as Variable
                return ReplaceSetupVariables(firstReplace, 0);
            }
        }

        // This method translates [VARIABLE] into {app} 
        private string ReplaceFolderVariables(string folder, int startPos)
        {
            if (!folder.Contains("["))
                return folder;
            else
            {
                // Replace variable with Inno Setup constant
                int start = folder.IndexOf('[', startPos);
                int end = start;
                while (end < folder.Length && end > -1)
                {
                    if (folder[end] == ']')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return folder; // All variables were scanned

                // Replace first part
                string variable = folder.Substring(start, (end - start));
                string slashFolder = folder.Replace(variable, GetFolderEquivalent(variable));                
                return ReplaceFolderVariables(slashFolder.Replace(@"\\", @"\"), start + 1);
            }
        }

        // This method replaces <VSSolutionFolder> into {#VS_SOLUTION_FOLDER}
        private string ReplaceFolderWithSymbol(string folder, int startPos)
        {
            if (!folder.Contains("<"))
                return folder;
            else
            {
                // Replace variable with Inno Setup {#Symbol}
                int start = folder.IndexOf('<', startPos);
                int end = start;
                while (end < folder.Length && end > -1)
                {
                    if (folder[end] == '>')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return folder; // All variables were scanned

                // Replace first part
                string variable = folder.Substring(start, (end - start));
                string slashFolder = folder.Replace(variable, GetSymbolEquivalent(variable));
                return ReplaceFolderWithSymbol(slashFolder.Replace(@"\\", @"\"), start + 1);
            }
        }

        // This method translates [VARIABLE] into {#INNO_SYMBOL} 
        private string ReplaceSetupVariables(string text, int startPos)
        {
            if (String.IsNullOrEmpty(text))
                return string.Empty;

            if (!text.Contains("["))
                return text;
            else
            {
                // Replace variable with Inno Setup constant
                int start = text.IndexOf('[', startPos);
                int end = start;
                while (end < text.Length && end > -1)
                {
                    if (text[end] == ']')
                    {
                        end++;
                        break;
                    }
                    end++;
                }
                if (end == -1)
                    return text; // All variables were scanned

                // Replace first part (without [ ] chars)
                string possibleSymbol = text.Substring(start, (end - start));
                string cleanProperty = possibleSymbol.Replace('[', ' ');
                cleanProperty = cleanProperty.Replace(']', ' ');
                cleanProperty = cleanProperty.Trim();

                try
                {
                    var productInfo = (ProductInfo)Enum.Parse(typeof(ProductInfo), cleanProperty);
                    string variable = GetValue(productInfo);
                    string slashFolder = text.Replace(possibleSymbol, variable);
                    return ReplaceSetupVariables(slashFolder.Replace(@"\\", @"\"), start + 1);
                }
                catch (Exception)
                {
                    return text;
                }                
            }
        }

        private string GetFolderEquivalent(string property)        
        {            
            string cleanProperty = property.Replace('[', ' ');
            cleanProperty = cleanProperty.Replace(']', ' ');
            cleanProperty = cleanProperty.Trim();
            // This is the same method for NSIS & Inno Setup
            return PropertyReference.GetVariableEquivalent(cleanProperty, true);
        }

        private string GetSymbolEquivalent(string property)
        {
            string cleanProperty = property.Replace('<', ' ');
            cleanProperty = cleanProperty.Replace('>', ' ');
            cleanProperty = cleanProperty.Trim();

            try
            {
                ProductInfo productInfo = (ProductInfo)Enum.Parse(typeof(ProductInfo), cleanProperty);
                string symbol = property;
                if (mDefinedSymbols.TryGetValue(productInfo, out symbol))
                    return string.Format("{{#{0}}}", symbol);

                return property;
            }
            catch (Exception)
            {
                return property;
            }
        }

        private void AddCommentLine(string comment)
        {
            AddScriptLine("; " + comment);
        }

        private void AddSection(string directive)
        {
            AddScriptLine("");
            AddScriptLine(directive);
        }

        private void CommentLine(int index)
        {
            if (mScriptData.ContainsKey(index))
            {
                string line = null;
                mScriptData.TryGetValue(index, out line);
                if (String.IsNullOrEmpty(line))
                {
                    line = "; ";
                    mScriptData.Add(index, line);
                }
                else
                {
                    if (line[0] != ';')
                    {
                        line = ";" + line;
                        mScriptData[index] = line;
                    }
                }
            }
        }

        private string GetValue(ProductInfo productInfo)
        {
            if (mVdProject.Product == null)
                return "[" + productInfo.ToString() + "]"; // Do not modify it!
            else
            {
                // Product info as symbol
                if (mDefinedSymbols.ContainsKey(productInfo))
                {
                    string value = null;
                    mDefinedSymbols.TryGetValue(productInfo, out value);
                    return "{#" + value + "}";
                }
            }
 	        return mVdProject.Product.GetValue(productInfo);
        }

        public bool SaveScript(string pathToScript)
        {
            try
            {
                string[] scriptFile = new string[mScriptData.Count];
                for (int i = 0; i < mScriptData.Count; i++)
                {
                    string line = null;
                    mScriptData.TryGetValue(i, out line);
                    scriptFile[i] = line;
                }
                System.IO.File.WriteAllLines(pathToScript, scriptFile);
                return true;
            }
            catch (System.Exception)
            {
                return false;
            }
        }
    }
}
